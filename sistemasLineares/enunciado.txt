Objetivo

Implementar  os  métodos de Eliminação  de Gauss (EG)  e Gauss-Seidel (GS) para resolver Sistemas Lineares (SL) e comparar performance em tempo e FLOPs (MFLOP/s).

 
Enunciado

Fazer  um programa  perfSL que  lê pela  entrada padrão  APENAS 1 (um) sistema linear (SL) AX = B, de ordem N. 

O formato de  entrada dos dados consiste da ordem  do SL na 1ª linha, e nas linhas seguintes está a matriz aumentada C = A|B, conforme exemplo abaixo:

4
4   -1   0    0   3
-1   4   -1   0   6
 0  -1    4   -1  1
 0   0   -1    4  12

 

Os  valores dos  coeficientes e  termos  independentes do  SL devem ser considerados do tipo real de precisão dupla.

A solução do SL deve ser calculada usando:

    Método de Eliminação de Gauss (EG) clássico com pivoteamento parcial (visto aqui);
    Método Iterativo de Gauss-Seidel (GS) clássico (visto aqui);

O programa perfSL deve  gerar na saída padrão os seguintes  dados para cada uma  das variações acima:

            A solução do SL (valores das incógnitas);
            O tempo médio de cálculo da solução em milisegundos
            O resíduo.

O formato de saída do programa DEVE SER RIGOROSAMENTE igual ao mostrado abaixo:

            EG:
            <tempo_em_ms> ms
            x1   x2   x3   ...   xn
                r1     r2     r3   ...    rn

           GS [ <it> iterações ]:
            <tempo_em_ms> ms
            y1   y2   y3   ...   yn
            r1     r2     r3   ...    rn

 onde os valores xi e yi  (calculados para as incógnitas do SL em cada variação) e ri (resíduo calculado para a solução de cada variação) devem ser mostrados com 12 (doze) casas decimais e os valores dos tempos com 8 (oito) casas decimais. Todos os cálculos de ponto flutuante devem ser efetuados com arredondamento para baixo (use a função  fesetround ).

Para o método GS, considere:

    O número máximo de iterações (MAXIT) deve ser 50;
    O valor inicial do vetor x de incógnitas deve ser nulo;
    Deve ser mostrado a quantidade <it> de iterações que o método executou para chegar à solução final exibida;
    O critério de parada deve ser a norma máxima do erro absoluto aproximado no vetor x de incógnitas:

    ||X⃗ (k+1)−X⃗ (k)||∞=max1⩽i⩽n|x(k+1)i−x(k)i|<10−4
    

Execução do Programa
Faça um script (em bash ou python) que executa o programa perfSL através do LIKWID de forma a mostrar também a quantidade de MFLOP/s, medida através do LIKWID. 


É imprescindível que sejam respeitadas as seguintes condições:

    Os códigos devem ser compilados com GCC e a opção: -O0;

    Os códigos devem ser instrumentados com a biblioteca do LIKWID;

    Os códigos devem ser compilados na mesma máquina utilizada para os testes. Você pode escolher um computador de sua preferência, desde que possua os contadores Likwid especificados.
    Não utilize as servidoras de processamento do DInf que tenham uso compartilhado. Elas podem ser máquinas virtuais e o compartilhamento impede medidas de desempenho. Em caso de dúvida, consulte o professor.

Ambiente para execução dos programas:

Durante o período em que os Laboratórios do DINF estiverem fechados, os programas devem ser feitos em computadores pessoais com LINUX (não pode ser Linux virtual) ou nas máquinas dos Laboratórios do DINF.

Para instalar a biblioteca LIKWID em sistemas Linux, siga as orientações no documento Instalação de LIKWID em Linux.

Para configurar sua área nas máquinas do DINF, siga as orientações no documento Uso do LIKWID no DINF.

Para verificar se o LIKWID está devidamente instalado e configurado para sua área, veja aqui.

Makefile

O arquivo Makefile deve possuir as regras necessárias para compilar os módulos individualmente e gerar o programa executável. As seguintes regras devem existir OBRIGATORIAMENTE:

all: compila e produz um executável chamado perfSL no diretório corrente;

purge: remove todos os arquivos temporários e os arquivos gerados pela compilação do programa (*.o, executável, etc.).

Arquivos auxiliares

O arquivo sistemas.dat apresenta vários exemplos de Sistemas Lineares (SL).  Observe  que o programa perfSL deve ler APENAS 1 (UM) SL e apresentar o resultado. O arquivo sistemas.dat  é apenas um conjunto de exemplos, não a entrada do programa.

Os arquivos utils.* contém funções de uso geral, incluindo a função timestamp(), a ser usada neste trabalho e nos próximos.

O arquivo Makefile é um exemplo que pode ser usado e já contém as regras clean, purge.